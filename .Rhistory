library(tidyverse)
1 / 200 * 30
#> [1] 0.15
(59 + 73 + 2) / 3
#> [1] 44.66667
sin(pi / 2)
#> [1] 1
1 / 200 * 30
#> [1] 0.15
(59 + 73 + 2) / 3
#> [1] 44.66667
sin(pi / 2)
#> [1] 1
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
<- 3 * 4
X <- 3 * 4
x <- 3 * 4
<- c(2, 3, 5, 7, 11, 13)
INSTALL.PACKAGES("TIDYVERSE")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library()
library(palmerpenguins)
penguins
install.packages("penguins")
glimpse(penguins)
View(penguins)
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
install.packages("ggrepel")
this_is_a_really_long_name <- 2.5
1+2
this_is_a_really_long_name
r_rock
library(tidyverse)
library(latex2exp)
download.packages(latex2exp)
download.packages("latex2exp")
download.packages("latex2exp")
install.packages("latex2exp")
download.packages("latex2exp")
library(tidyverse)
library(latex2exp)
#| eval: false
#| echo: true
?Distributions
# Chunk 1
library(tidyverse)
library(latex2exp)
#| eval: false
#| echo: true
?Distributions
#| echo: true
dbinom(x = 4, # X = 4
size = 4, # n, Number of coin flips
prob = 0.5) # p, Probability of a heads
#| echo: true
dbinom(x = 2, # X = 2
size = 4, # n, Number of coin flips
prob = 0.5) # p, Probability of a heads
# Chunk 1
library(tidyverse)
library(latex2exp)
# Chunk 3
#| echo: true
dbinom(x = 2, # X = 2
size = 4, # n, Number of coin flips
prob = 0.5) # p, Probability of a heads
# Chunk 1
library(tidyverse)
library(latex2exp)
# Chunk 3
#| echo: true
dbinom(x = 2, # X = 2
size = 4, # n, Number of coin flips
prob = 0.5) # p, Probability of a heads
dbinom(x = 4, # X = 4
#| echo: true
sum (dbinom(x = 10:100, # X >= 10 and <=100
size = 100, # n, Number of tests
prob = 0.08) # p, Probability of false negative results
#| echo: true
sum (dbinom(x = 10:100, # X >= 10 and <=100
> #| echo: true
#| echo: true
sum(dbinom(x = 10:100, # X >= 10 and <=100
size = 100, # n, Number of tests
prob = 0.08) # p, Probability of false negative results
#| echo: true
sum(dbinom(x = 10:100, # X >= 10 and <=100
#| echo: true
sum(dbinom(x = 10:100, # X >= 10 and <=100
size = 100, # n, Number of tests
prob = 0.08)) # p, Probability of false negative results
#| echo: true
dbinom(x = 10:100, # X >= 10 and <=100
size = 100, # n, Number of tests
prob = 0.08) # p, Probability of false negative results
#| echo: true
sum(dbinom(x = 10:100, # X >= 10 and <=100
size = 100, # n, Number of tests
prob = 0.08)) # p, Probability of false negative results
library(tidyverse) # data-wrangling (see more: https://www.tidyverse.org/)
library(haven) # to read non-R filetypes (see more: https://haven.tidyverse.org/)
library(here) # to help us easily find files (see more: https://here.r-lib.org/)
here()
df_netflix <- read_csv(file = here("02_descriptive-statistics-EDA", # workshop folder
"netflix1.csv")) # file of interest
df_netflix <- read_csv(file = here("02_descriptive-statistics-EDA", # workshop folder
"netflix1.csv")) # file of interest
df_netflix <- read_csv(file = here(
"netflix1.csv")) # file of interest
df_netflix <- read_csv(file = here("netflix1.csv")) # file of interest
df_netflix <- read_csv(file = here("netflix1.csv")) # file of interest
df_netflix <- read_csv(file = here("netflix1.csv")) # file of interest
library(rmdformats) # the markdown theme
library(SNPRelate) # handles reading in plink data format
BiocManager::install("SNPRelate")
install.packages("BiocManager")
BiocManager::install("SNPRelate")
# Convert the dataset from plink (a very common format) to something R can handle
if(!file.exists("wgas2_gds")) # otherwise it will error and not overwrite
snpgdsBED2GDS(
bed.fn = 'wgas2.bed',
bim.fn = 'wgas2.bim',
fam.fn = 'wgas2.fam',
out.gdsfn = 'wgas2_gds',
cvt.chr = 'char'
)
# Read the data we converted in
genofile = snpgdsOpen('wgas2_gds')
library(rmdformats) # the markdown theme
library(SNPRelate) # handles reading in plink data format
library(ggplot2)
library(qqman) # for qq and manhattan plots
# Convert the dataset from plink (a very common format) to something R can handle
if(!file.exists("wgas2_gds")) # otherwise it will error and not overwrite
snpgdsBED2GDS(
bed.fn = 'wgas2.bed',
bim.fn = 'wgas2.bim',
fam.fn = 'wgas2.fam',
out.gdsfn = 'wgas2_gds',
cvt.chr = 'char'
)
# Read the data we converted in
genofile = snpgdsOpen('wgas2_gds')
genofile
# Run a PCA analysis
pca = snpgdsPCA(genofile)
# What does the return object look like?
str(pca)
# Plot the pca. Often the first two PCs are the most visually understandable.
pldta = data.frame(
sid = pca$sample.id,
pc1 = pca$eigenvect[,1],
pc2 = pca$eigenvect[,2],
stringsAsFactors = FALSE
)
# Ah, that's a shame, it didn't use the useful identifier from the fam file, so we need to read that in too
# - read in the fam file
fam = read.table('wgas2.fam', header=FALSE, stringsAsFactors=FALSE)
names(fam)[1:2] = c('sid2', 'sid')
head(fam)
# - plug in the identifier
pldta$sid2 = fam$sid2[match(pldta$sid, fam$sid)]
# - now we can differentiate the two populations
pldta$pop = substring(pldta$sid2, 1, 2)
head(pldta)
table(pldta$pop)
ggplot(pldta, aes(x=pc1, y=pc2, col=pop)) +
geom_point()
# Take out snp.id
snp.id = read.gdsn(index.gdsn(genofile, "snp.id"))
# Draw a random set of SNPs
set.seed(255) # make reproducibile
ss = sample(snp.id, 500)
# Create some random effect sizes... some unreasonably strong ones so we find them?
set.seed(256)
ef = rnorm(500) * 10
# Load in the genotype data
gg = snpgdsGetGeno(genofile, snp.id=ss, with.id=TRUE)
ggg = gg$genotype
# And apply the effect scores...
simdta = pldta
set.seed(257)
simdta$trait = rnorm(nrow(simdta))/10 # start with the trait being pure noise
ffix = function(g){ # set missing genotype data to average just for practice, otherwise can't generate phenotypes
w = which(is.na(g))
g[w] = mean(g, na.rm=TRUE)
g
}
for(i in 1:500) # and drop in some real data
simdta$trait = simdta$trait + ffix(ggg[,i]) * ef[i]
summary(simdta$trait)
hist(simdta$trait)
install.packages("gapminder")
library(gapminder)
data <- gapminder
View(data)
View(data)
gapminder %>%
ggplot(aes(x = gdpPrecap, Y= lifeExp)) +
geom_point()
library (tidyverse)
gapminder %>%
ggplot(aes(x = gdpPrecap, Y= lifeExp)) +
geom_point()
gapminder %>%
ggplot(aes(x = gdpPrecap, Y= lifeExp)) +
geom_point()
gapminder %>%
ggplot(aes(x = gdpPercap, Y= lifeExp)) +
geom_point()
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
hers <- read_dta("/full/path/to/hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("/full/path/to/hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
View(data)
View(hers)
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
View(hers)
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
summary(fit1)
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
# Chunk 2
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
summary(fit1)
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
# Chunk 2
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
summary(fit1)
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
# Chunk 2
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
summary(fit1)
# Chunk 1
#| message: false
library(tidyverse) # work with data
library(haven) # reads non-R data files (ex: .dta)
# Call in the data
hers <- read_dta("~/Downloads/hersdata.dta")
# Chunk 2
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
summary(fit1)
library(broom)
detach("package:broom", unload = TRUE)
library(broom)
fit1 <- lm(poorfair ~ exercise + drinkany + smoking,
data = hers)
summary(fit1)
broom::tidy(fit1,
exponentiate = TRUE)
broom::tidy(fit1,
exponentiate = TRUE)
confint.default(fit1)
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
confint.default(fit1)
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
tidy(fit1, conf.int = TRUE, conf.level = 0.90)
tidy(fit1, conf.int = TRUE, conf.level = 0.95)
tidy(fit1, conf.int = TRUE, conf.level = 0.99)
confint.default(fit1)
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
tidy(fit1, conf.int = TRUE, conf.level = 0.90)
tidy(fit1, conf.int = TRUE, conf.level = 0.95)
tidy(fit1, conf.int = TRUE, conf.level = 0.99)
confint.default(fit1, level = 0.95)
fit1 <- glm(poorfair ~ exercise + drinkany + smoking,
family = binomial(),
data = hers)
tidy(fit1, conf.int = TRUE, conf.level = 0.90)
tidy(fit1, conf.int = TRUE, conf.level = 0.95)
confint.default(fit1, level = 0.95)
fit1 <- lm(poorfair ~ exercise + drinkany + smoking,
data = hers)
tidy(fit1, conf.int = TRUE, conf.level = 0.90)
tidy(fit1, conf.int = TRUE, conf.level = 0.95)
confint.default(fit1, level = 0.95)
setwd("~/BIOSTAT_FP")
setwd("~/BIOSTAT_FP")
setwd("~/BIOSTAT_FP")
getwd()
View(data)
View(fam)
View(fam)
View(pca)
q()
library(dplyr)
library(ggplot2)
library(sqldf)
library(tidyr)
library(infer)
library(countrycode)
library(gt)
data <- read.csv("data/life_expectancy.csv")
data <- read.csv("data/life_expectancy.csv")
